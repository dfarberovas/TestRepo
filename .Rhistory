library(xlsx)
setwd("E:/_GIT_/TestRepo")
library(XLConnect)
cameraData<-read.xlsx(".\\data\\cameras.xlsx", sheetIndex=1, headers=TRUE)
install.package("XML")
install.packages("XML")
library(XML)
fileUrl<-"http://www.w3school.com/xml.simple.xml"
doc<-xmlTreeParse(fileUrl,useInternal=TRUE)
fileUrl<-"http://www.w3schools.com/xml.simple.xml"
doc<-xmlTreeParse(fileUrl,useInternal=TRUE)
fileUrl<-"http://www.w3schools.com/xml/simple.xml"
doc<-xmlTreeParse(fileUrl,useInternal=TRUE)
rootNode<-xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[1]][[1]]
xmlSApply(rootNode,xmlValue)
xmlSApply(rootNode,xmlName)
xpathSApply(rootNode,"//name",xmlValue)
xpathSApply(rootNode,"//price",xmlValue)
fileUrl<-"http://espn.go.com/nfl/team/_/name/bal/baltimore-ravens"
dkoc<-htmlTreeParse(fileUrl,useInternal=TRUE)
doc<-htmlTreeParse(fileUrl,useInternal=TRUE)
scores<-xpathSApply(doc,"//li[@class='score']", xmlValue)
scores
scores[1-10]
scores[1]
doc
scores<-xpathSApply(doc,"li[@class='score']",xmlValue)
teams<-xpathSApply(doc,"li[@class='team-name']",xmlValue)
scores<-xpathSApply(doc,"//li[@class='score']",xmlValue)
install.packages("jsonlite")
library(jsonlite)
jsonData<-fromJSON("https://api.github.com/users/jtleek/repos")
instal.packages("curl")
install.packages("curl")
jsonData<-fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
names(jsonData$owner)
jsonData$owner$login
iris
myjson<-to\json9iris, pretty=TRUE)
myjson<-toJSON(iris, pretty=TRUE)
cat(myjson)
myjson<-toJSON(iris, pretty=TRUE)
iris2<-fromJSON(myjson)
head(iris2)
head(iris)
install.packages("data.table")
library(data.table)
DF=data.fram(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
DF=data.frame(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(DF)
DT=dat.table(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
DT=data.table(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(DT)
DT
tables()
DT[2,]
DT[DT$y="a",]
DT[DT$y=="a",]
DT[c(2,3)]
DT[,list(mean(x),sum(z)]
DT[,list(mean(x),sum(z))]
DT[,w:=z^2]
DT
DT[,m:={tmp<-(x+y); log2(tmp+5)}]
DT[,m:={tmp<-(x+z); log2(tmp+5)}]
DT
DT[,a:=x>0]
DT
DT[,b:=mean(x+w), by=a]
DT
DT
set.seed(123)
DT<-data.table(x=sample(letters[1:3], 1E5, TRUE))
DT[, .N, by=x]
DT <- data.table(x=rep(c("a","b","c"),each=100), y= rnorm(300))
setkey(DT, x)
DT['a']
tables()
DT1<-data.table(x=c('a','b','b','dt1'), y=1:4)
DT1<-data.table(x=c('a','a','b','dt1'), y=1:4)
DT2<-data.table(x=c('a','b','dt2'),z=5:7)
setkey(DT1,x)
setkey(DT2,x)
DT1
DT2
merge(DT1,DT2)
View(DF)
fileUrl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl,destfile=".\\data\comsurvey.csv")
download.file(fileUrl,destfile=".\\data\\comsurvey.csv")
file<-".\\data\\comsurvey.csv"
CSDT<-fread(file)
CSDT[,VAL>13]
CSDT[,VAL==24]
View(CSDT)
CSDT[CSDT$VAL=="24"]
fileUrl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
download.file(fileUrl, destfile=".\\data\\restaurants.xml")
doc<-xmlTreeParse(fileUrl,useInternal=TRUE)
doc<-xmlTreeParse(".\\data\restaurants.xml",useInternal=TRUE)
doc<-httpTreeParse(fileUrl,useInternal=TRUE)
doc<-htmlTreeParse(fileUrl,useInternal=TRUE)
doc<-xmlTreeParse(fileUrl,useInternal=TRUE)
zipcodes<-xpathSApply(doc,"//zipcode",xmlValue)
zipcodes.
zipcodes
rootNode<-xmlRoot(doc)
rootNode
doc<-htmlTreeParse(fileUrl,useInternal=TRUE)
rootNode<-xmlRoot(doc)
rootNode
doc
doc<-xmlTreeParse(".\\data\restaurants.xml",useInternal=TRUE)
doc
doc1<-xmlTreeParse(".\\data\restaurants.xml",useInternal=TRUE)
doc1
doc1<-xmlTreeParse(".\\data\\restaurants.xml",useInternal=TRUE)
doc1
zipcodes<-xpathSApply(doc1,"//zipcode",xmlValue)
zipcodes
zipcodes<-xpathSApply(doc1,"//zipcode='21231",xmlValue)
zipcodes
zipcodes['21231']
zipcodes["21231"]
as.datafram(zipcodes)
as.dataframe(zipcodes)
zipcodes[zipcodes = 21231]
zipcodes[zipcodes = "21231"]
zipcodes[zipcodes == "21231"]
fileUrl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl,".\\data\\ccc.csv")
CCCDT<-fread(".\\data\\ccc.csv")
View(CCCDT)
DT<-fread(".\\data\\ccc.csv")
system.time(DT)
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(DT[,mean(pwgtp15),by=SEX])
DT[,mean(pwgtp15),by=SEX]
system.time(rowMeans(DT)[DT$SEX==1])
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
sapply(split(DT$pwgtp15,DT$SEX),mean)
system.time(mean(DT$pwgtp15,by=DT$SEX))
mean(DT$pwgtp15,by=DT$SEX)
tapply(DT$pwgtp15,DT$SEX,mean)
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
View(CCCDT)
