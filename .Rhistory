x<-list(a=1:5, b=rnorm(10))
lapply(x, mean)
x<-1:4
lapply(x, runif)
lapply(x, runif, min=0, max=10)
x<- list(a=matrix(1:4, 2,2), b = matrix(1:6, 3,2))
x
lapply(x, function(elt)elt[,1])
x<- list(a = 1:4, b=rnorm(10), c=rnorm(20,1), d=rnorm(100,5))
lapply(x, mean)
sapply(x, mean)
?rnorm
x<- matrix(rnorm(20), 20, 10)
apply(x,2,mean)
apply(x,1,mean)
apply(x,1,quantile,probs=c(0.25, 0.75))
apply(x,1,quantile,probs=c(0.25, 0.75))
a <- array(rnorm(2*2*10), c(2,2,10))
View(x)
View(x)
a
view(a)
View(a)
?rep
rep(2,1)
rep(2,10)
l<-list(rep(1,4), rep(2,3), rep(3,2), rep(4,1))
l
mapply(rep, 1:4, 4:1)
noise <- function(n, mean, sd){
rnorm(n,mean, sd)
}
noise(5,1,2)
mapply(noise, 1:5, 1:5, 2)
?gl
fff<-c(1,1,1,2,2,2,3,3,3)
fff
as.factor(fff)
x<-c(rnorm(10),runif(10),rnorm(10,1))
f<-gl(3,10)
f
tapply(x, f, mean)
tapply(x, f, mean, simplify = FALSE)
tapply(x, f, range)
split(x,f)
lapply(split(x,f),mean)
library(datasets)
head(airquality)
s<-split(airquality, airquality$Month)
s
s[,1]
s[[1]
s[[1]]
s[[1]]
colMeans(s[[1]])
colMeans(s[[1,"Solar.R"]])
colMeans(s[1,"Solar.R"])
colMeans(s[,"Solar.R"])
colMeans(s[1,"Solar.R"])
colMeans(s$'5'[,"Solar.R"])
s$'5'
colMeans(s$'5')
colMeans(s$'5'$Solar.R)
colMeans(s$'5'["Solar.R"])
colMeans(s$'5'["Wind"])
head(airquality)
lapply(s, function(x)colMeans(x[,c("Ozone", "Solar.R", "Wind")]))
colMeans(s$'5'["Wind","Solar.R"])
colMeans(s$'5'[C("Wind","Solar.R")])
colMeans(s$'5'[,C("Wind","Solar.R")])
x<-s$5
s$'5'
x<-s$'5'
colMenas(x[,c("Ozone","Solar.R")])
colMeans(x[,c("Ozone","Solar.R")])
colMeans(x[,c("Wind","Solar.R")])
colMeans(s$'5'[,c("Wind","Solar.R")])
colMeans(s$'5'[,c("Wind","Solar.R")])
colMeans(s$'5'[,c("Wind","Solar.R")])
lapply(s,function(x)colMeans(x[,c("Ozone", "Solar.R", "Wind")]))
sapply(s,function(x)colMeans(x[,c("Ozone", "Solar.R", "Wind")]))
sapply(s,function(x)colMeans(x[,c("Ozone", "Solar.R", "Wind")]), rm.na=TRUE)
sapply(s,function(x)colMeans(x[,c("Ozone", "Solar.R", "Wind")]), na.rm=TRUE)
sapply(s,function(x)colMeans(x[,c("Ozone", "Solar.R", "Wind")], na.rm=TRUE))
<-rnorm(10)
x<-rnorm(10)
f1<-gl(2:5)
x<-rnorm(10)
f1<-gl(2:5)
x<-rnorm(10)
f1<-gl(2,5)
f2<-gl(5,2)
f1
f2
interaction(f1,f2)
?interaction
split(x,list(f1,f2))
str(split(x,list(f1,f2)))
str(split(x,list(f1,f2), drop=TRUE))
log(-1)
?invisible
printmessage <- function(x){
if(x>0)
print("x is grater than zero")
else
print("x is less than or equal to zero")
}
primntmessage(1)
printmessage(1)
printmessage <- function(x){
if(x>0)
print("x is grater than zero")
else
print("x is less than or equal to zero")
invisible(x)
}
primntmessage(1)
printmessage(1)
printmessage(NA)
printmessage(NaN)
lm(xxx-ttt)
traceback()
debug(lm)
lm(xxx-ttt)
function (formula, data, subset, weights, na.action, method = "qr",
{
ret.x <- x
ret.y <- y
cl <- match.call()
mf <- match.call(expand.dots = FALSE)
m <- match(c("formula", "data", "subset", "weights", "na.action",
"offset"), names(mf), 0L)
mf <- mf[c(1L, m)]
mf <- mf[c(1L, m)]
mf$drop.unused.levels <- TRUE
mf[[1L]] <- quote(stats::model.frame)
mf <- eval(mf, parent.frame())
if (method == "model.frame")
return(mf)
else if (method != "qr")
warning(gettextf("method = '%s' is not supported. Using 'qr'",
method), domain = NA)
mt <- attr(mf, "terms")
y <- model.response(mf, "numeric")
w <- as.vector(model.weights(mf))
if (!is.null(w) && !is.numeric(w))
stop("'weights' must be a numeric vector")
offset <- as.vector(model.offset(mf))
if (!is.null(offset)) {
if (length(offset) != NROW(y))
stop(gettextf("number of offsets is %d, should equal %d (number of observations)",
length(offset), NROW(y)), domain = NA)
}
if (is.empty.model(mt)) {
x <- NULL
z <- list(coefficients = if (is.matrix(y)) matrix(, 0,
3) else numeric(), residuals = y, fitted.values = 0 *
y, weights = w, rank = 0L, df.residual = if (!is.null(w)) sum(w !=
0) else if (is.matrix(y)) nrow(y) else length(y))
if (!is.null(offset)) {
z$fitted.values <- offset
z$residuals <- y - offset
}
}
options(error=recover)
read.csv("ddddddd.ddd")
data(iris)
?iris
head(iris)
tapply(iris, iris$Secies, mean)
options(error=DEFAULT)
tapply(iris,as.factor(iris$Species),mean)
iris$Species
split(iris, iris$Species)
ls <- split(iris, iris$Species)
ls$virginica
mean(ls$virginica[Sepal.length])
mean(ls$virginica["Sepal.Length"])
0
ls$verginica["Sepal.Length"]
ls$verginica
ls
ls$virginica
ls$virginica["Sepal.Length"]
mean(ls$virginica["Sepal.Length"])
ls$virginica["Sepal.Length"]
tapply(iris, iris$Species, mean)
colMeans(ls$virginica[,"Sepal.Length"])
colMeans(ls$virginica[,c("Sepal.Length")])
ls$virginica[, c("Sepal.Length")
]
mean(ls$virginica[, c("Sepal.Length")])
colMeans(iris)
head(iris)
apply(iris[, 1:4], 2, mean)
data(mtcars)
head(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$cyl), avg)
sapply(split(mtcars$cyl), average)
head(mtcars)
sapply(split(mtcars$cyl), max)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$hp, mtcars$cyl), mean)
hpp<-sapply(split(mtcars$hp, mtcars$cyl), mean)
hpp
hpp$8
hpp[3]
hpp[3]-hpp[1]
set.seed(20)
x<-rnorm(100)
e<-rnorm(100,0,1)
y<-0.5+2*x+e
summary(y)
2*x
x
0.5+x
x
x+e
e
x
plot(x,y)
str(rbinom)
rbinom(100,0,0.75)
rbinom(100,0,0.5)
rbinom(100,1,0.5)
rbinom(100,1,0.75)
rbinom(100,2,0.5)
x<-rbinom(100,2,0.5)
plot(x,y)
rbinom(100,2,0.1)
rbinom(100,2,0.01)
rbinom(100,2,0.001)
rbinom(100,10,0.1)
set.seed(1)
x<-rnorm(100)
log.mu<-0.5+0.3*x
y<-rpois(100,exp(log.mu))
str(rpos)
str(rpois)
plot(x,y)
summary(y)
str(sample)
sample(1:10,5)
sample(1:10,5)
sample(1:10,5)
sample(1:10,5)
sample(rnorm(100),5)
sample(1:10)
sample(1:10)
sample(1:10)
letter
letters
sample(letters,5)
sample(1:10, replace=TRUE)
sample(1:10, replace=TRUE)
sample(1:10, replace=TRUE)
sample(1:10, replace=TRUE)
str(system.time)
system.time()
system.time(str)
system.time(str)
?outer
?svd
x<-1:5
outer(x-1,x,"+")
1 / outer(x-1,x,"+")
hilbert <- function(x){
i<-1:x
1 ? outer(x-1,x,"+")
}
?outer
outer(x,x,"+")
x<-hilbert(1000)
hilbert <- function(x){
i<-1:x
1 ? outer(i-1,i,"+")
}
x<-hilbert(1000)
hilbert <- function(x){
i<-1:x
1 / outer(i-1,i,"+")
}
x<-hilbert(1000)
system.time(svd(x))
system.time({
n<-1000
r<-numeric(n)
for(i in 1:n){
x<-rnorm(n)
r[i]<-mean(x)
}
})
x<-1:10
y<-1:10
lm(y~x)
sample.interval=10000
str(rprof)
str(Rprof)
Rprof()
sample.interval=10000
lm(y~x)
lm()
lm(x,y)
lm(x)
lm(x*y)
lm(x~y)
x<-hilber(1000)
x<-hilbert(1000)
y<-hilbert(1000)
lm(x~y)
Rprof()
lm(x~y)
?Rptof
?Rprof
Rprof(NULL)
lm(x~y)
$by.self
by.self
summaryProf()
summaryRprof()
Rptof(NULL)
Rprof(NULL)
summaryRprof()
Rptof("aaa.txt")
Rprof("aaa.txt")
lm(x~y)
summaryRprof()
Rprof()
Rprof(NULL)
str(summaryRprof)
summaryRprof("aaa.txt")
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(x,y)
setwd("D:/_GIT_/TestRepo")
install.packages("RMySQL")
lyabrary(RMySQL)
lybrary(RMySQL)
library(RMySQL)
version()
ver()
R.version()
R.Version()
ucscDb<-dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result<-dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDb);
result
hg19<-dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
allTables<-dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19, "affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData<- dbReadTable(hg19, "affyU133Plus2")
warnings()
head(affyData)
query<-dbSendQuery(hgq9, "select * from affyU133Plus2 where misMatches between 1 and 3")
query<-dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis<-fetch(query)
quantile(affyMis$misMatches)
affyMisSmall<- fetch(query, n=10)
dbClearResult(query)
dim(affyMisSmall)
dim(affyMis)
dbDisconnect(hg19)
