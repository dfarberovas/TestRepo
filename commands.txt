git config --global user.name "Your Name"
git config --global user.email "your@email.address"

git config --list

## to init new local repository from new github repository
git inti
git remote add origin https://github.com/dfarberovas/repo_name.git
git pull https://github.com/dfarberovas/repo_name.git master

git add .
git commit -m "message"
git push

git checkout -b branchname <create branch>
git branch	<to see what branch you are on>

git status <see what is added, but not checked-in yet locally>

Bash commands
pwd
clear
ls
cd
mkdir
touch <creates an empty file>
cp
rm
mv
date
echo

R:

getwd() - get working dir
setwd() - set working dir

<- assignment operator
x <- 1:20
x
Result: [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20


## types of dataset
data.frame	
vector
matrix
factor
list

1    ## numeric
1L   ## integer
Inf  ## special number
Nan  ## undefined value Not a Number
NA   ## missing value NaN is NOT NA !!!

x <- c(0.5, 0.6)       	## numeric
x <- c(T,F)				## logical
x <- c("a", "b", "c")	## character
x <- 1:3				## integer
x <- c(1+0i, 2+4i)		## complex
 
x <- vector("integer", length = 10)
 [1] 0 0 0 0 0 0 0 0 0 0
 
> x <- 0:6
> class(x)
[1] "integer"
> as.numeric(x)
[1] 0 1 2 3 4 5 6
> as.complex(x)
[1] 0+0i 1+0i 2+0i 3+0i 4+0i 5+0i 6+0i
> as.character(x)
[1] "0" "1" "2" "3" "4" "5" "6"
> 

> z <- c("a", "b", "c")
> as.logical(z)
[1] NA NA NA
> as.integer(z)
[1] NA NA NA
Warning message:
NAs introduced by coercion 
> as.complex(z)
[1] NA NA NA
Warning message:
NAs introduced by coercion 
>

> x <- list(1:5, "a", T, 1+3i) 
> x
[[1]]   ## !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
[1] 1 2 3 4 5

[[2]]
[1] "a"

[[3]]
[1] TRUE

[[4]]
[1] 1+3i

## ----------- Matrix -------------- ##

> m <- matrix(1:4, nrow=2, ncol=2)

m <- 1:10
dim(m) <- c(2,5)  ## vector to matrix

> z <- 1:3
> y <- 11:13
> cbind(z, y) ## matrix by column binding
     z  y
[1,] 1 11
[2,] 2 12
[3,] 3 13
> rbind(z,y)  ## matrix by row binding
  [,1] [,2] [,3]
z    1    2    3
y   11   12   13

## ------------ Factor -------------- ##
> x <- factor(c("yes", "yes", "no", "yes", "no"))
> x
[1] yes yes no  yes no 
Levels: no yes
> table(x)
x
 no yes 
  2   3 
  
## ------------- Data Frame ---------- ##
Could be columns of different data types but of the same length (number of rows)

## ------------- Names --------------- ##
> z <- 1:3
> names(z) <- c("a", "b", "c")
> z
a b c 
1 2 3 

> l <- list(a=1:3, b=T, c="dfgsg", d=1+1i) ## list with names

> m <- matrix(1:5, nrow=3, ncol=3)> > 
> dimnames(m) <- list(c("a","b","c"), c("d","e","f"))
> m
  d e f
a 1 4 7
b 2 5 8
c 3 6 9
> 

## ------------- Read --------------- ##
> data <- read.table("fname.txt") ## default separator ' ' SPACE
> data <- read.csv("fname.txt")   ## default separator ',' comma; headers - true

in <- read.table("dataset.txt", nrows=100)
cl <- sapply(in, class)
inA <- read.table(dataset.txt, coClasses = cl)


## -------------- Save/Restore Data ---- ##
> dput(dc, file="dc.R")
> dddd <- dget("dc.R")

> x <- "aaa"
> y <- 1:5
> z <- c(T, F, T)
> dump(c("x", "y", "z"), file = "dumpdata.R")

> source("dumpdata.R")

## ------------- Read file ------------- ##
##   data <- read.csv("foo.csv") ##
con <- file("foo.csv", "r")
data <- read.csv(con)
close(con)

con <- gzfile("aaaa.gz")
x <- readLines(con, 10)  ## read ten lines from file

## ----------------- Subsetting -------- ##
[	- to select an element of the same class
[[  - to select an elements of the list
$	- to extract an element of the list by name

> x <- c("a", "b", "c", "d", "e", "f")
> x[1]
[1] "a"
> x[1:4]
[1] "a" "b" "c" "d"

> x <- c("a", "b", "c", "d", "e", "f", "a")
> x[x > "a"] ## !!!!!!!!!!!!!!!!
[1] "b" "c" "d" "e" "f"

> u <- x > "a"
> u
[1] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE
> 
> x[u]
[1] "b" "c" "d" "e" "f"


> x <- list(foo = 1:4, bar = c(0.6, 0.7))
> x[1]
$foo
[1] 1 2 3 4  ## List !!!
> x[[1]]
[1] 1 2 3 4 ## Vector

> x["foo"]
$foo
[1] 1 2 3 4 ## List
> x$foo
[1] 1 2 3 4  ## vector


> x <- list(foo = 1:4, bar = c(0.6, 0.7), baz = "hello!")
> x[c(1,3)] 	## 1 and 3 elements of the list
$foo
[1] 1 2 3 4
$baz
[1] "hello!"

> name <- "foo"
> x[[name]]			## name = "foo"
[1] 1 2 3 4
> x[["foo"]]
[1] 1 2 3 4


> x <- list(a = list(10, 12, 14), b = c(3.14, 2.81))
> x[[c(1,3)]]
[1] 14
> x[[1]][[3]]
[1] 14

> x <- matrix(1:6, 2,3)
> x
     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6
> x[1,2]  ## row, column; return single digit vector
[1] 3
> x[2,1]
[1] 2
> x[2,]		## second row
[1] 2 4 6
> x[,3]		## third column
[1] 5 6

> x[1,2, drop="FALSE"] 	## return matrix
     [,1]
[1,]    3


> x <- list(a1=1:5, b1=6:9, a2=10:15)
> x$b
[1] 6 7 8 9
> x[["b", exact="FALSE"]]
[1] 6 7 8 9
> x$a		## !!!!!!!!!!!!!!!!!
NULL

## --------- Removing missing values ---------------- ##
> x<-c(1,2,NA,3,4,NA,5,NaN,6)
> bad<-is.na(x)
> x[!bad]
[1] 1 2 3 4 5 6

> x<-c(1,2,NA,3,NA,4)
> y<-c("a","b",NA,"c",NA,"d")
> good<-complete.cases(x,y)
> x[good]
[1] 1 2 3 4
> y[good]
[1] "a" "b" "c" "d"


## ---------------- Vectorized operations ------------- ##

> x<-1:4; y<-6:9
> x + y
[1]  7  9 11 13

> x <- matrix(1:4, 2,2); y<- matrix(rep(10,4),2,2)
> x;y
     [,1] [,2]
[1,]    1    3
[2,]    2    4
     [,1] [,2]
[1,]   10   10
[2,]   10   10
> 
> x*y			## element-wise multiplication
     [,1] [,2]
[1,]   10   30
[2,]   20   40
> x %*% y		## true matrix multiplication
     [,1] [,2]
[1,]   40   40
[2,]   60   60






